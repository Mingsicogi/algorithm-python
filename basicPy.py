
import sys

a=1000
print(a)


a = 7
b = 3

print(a/b) #나누기
print(a%b) #나머지
print(a//b) # 몫

print(5 ** 3) # 거듭제곱
print(2 ** 0.50) # 제곱근


##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################


# list comprihansion
array = [i for i in range(20) if i % 2 == 1]
print(array)

# reverse index
print(array[-1])

# initialize by zero
array = [0] * 20
print(array)

# list comprihansion best use case
n = 4
m = 3

print([0] * m)

array = [[0] * m for _ in range(n)]
print(array)

# under score(_) : 파이썬에서는 반복을 수행하되 반복을 위한 변수의 값을 무시하고자 할때 자주 사용함
sum = 0
for i in range(10) :
    sum += i
print(sum)

for _ in range(10) :
    print("hello world~!")


# list extra method
array = [i for i in range(10)]
array.reverse() # O(N)
print(array)

array.append(50) # O(1)
print(array)

array.sort() # O(NlogN)
print(array)

array.sort(reverse=True) # O(NlogN)
print(array)

array.insert(2, 10) # O(N)
print(array)

array.insert(2, 10)
print(array)
print(array.count(10)) # O(N)

array.remove(10) # O(N), 값이 10인 데이터 삭제. 한개씩 삭제됨
print(array)

# 리스트에서 특정 값을 가지는 원소를 모두 제거하기
a = [1,2,3,4,5,5,5]
remove_set = {3, 5}

result = [i for i in a if i not in remove_set]
print(result)


##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################


# string (immutable)
data = 'Hello Python'
print(data)
print(data * 3)
print(data[3:7])

a = "Hello"
b = "Python"
print(a + " " + b)


# tuple - 한번 선언된 값을 변경할 수 없음. 소괄호 사용 (리스트는 변경 가능, 대괄호 사용) => 튜플이 메모리 공간을 효율적으로 사용함
a = (1,2,3,4,5,6)
print(a[1])
print(a[4:7])

### tuple best practice 
#   1. 서로 다른 성질의 데이터를 묶어서 관리해야 할 때 - 최단거리 알고리즘(비용, 노드 번호)
#   2. 데이터의 나열을 해싱의 키 값으로 사용해야 할 때 - 튜플은 변경이 불가능하므로 리스트와 다르게 키 값으로 사용될 수 있음
#   3. 리스트보다 메모리를 효율적으로 사용해야 할 때


##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################


# 사전 자료형(Map) - 사전 자료형은 키와 값의 쌍을 데이터로 가지는 자료형 O(n)
data = dict()
data['apple'] = '사과'
data['banana'] = '바나나'

print(data)

if 'apple' in data :
    print("'사과가 존재합니다'")

for key in data.keys():
    print(key)

for value in data.values():
    print(value)

data2 = {
    'apple' : '사과',
    'banana' : '바나나'
}
print(data2)

array = list(data2.values()) # list type casting
print(array)

# 집합 자료형(Set) - O(n)
data3 = set([1,2,3,4,5,6,7,8,8,8,8,8])
print(data3)

data4 = set([1,2,3,4,5,6,10,11,12])
print(data4)
print('--------------------------------------')
print(data3 & data4)
print(data3 | data4)
print(data3 - data4)

print('--------------------------------------')
data3.add(100)
print(data3)
data3.update([-3,-4,-5])
print(data3)
data3.remove(8)
print(data3)



##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################
##########################################################################################################################################



# 입출력
# n = int(input())
# print(n)

# data = list(map(int, input().split()))
# print(data)

# a, b, c = list(map(int, input().split()))
# print(a, b, c)

# 빠른 입력
# a = sys.stdin.readline().rstrip() # 입력 후 엔터가 줄 바꿈 기호로 입력되므로 rstrip() 메서드를 함께 사용.
# print(a)

# 출력
a = 1
b = 2
c = 3
print(a, b ,c)

print(a, end="|")
print(b, end="|\n")

print("정답은 " + str(a + b) + " 입니다.")
print(f"정답은 {a+c} 입니다.")


# 조건문
